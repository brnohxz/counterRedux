{"version":3,"sources":["bll/incrementReducer.ts","bll/notificationsReducer.ts","components/SettingsPicker.tsx","components/ChangeImageURL.tsx","components/SettingPage.tsx","components/DialogSettings.tsx","components/Notification.tsx","components/Counter.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","bll/preloadedState.ts","index.tsx"],"names":["initState","value","pickerValue","imageURL","ntfRequired","ntfText","ntfType","showNtfAC","type","useStyles","makeStyles","theme","root","maxWidth","display","justifyContent","alignItems","margin","spacing","SettingsPicker","settingsValue","useSelector","state","incrementValue","useState","pickerState","setPickerState","dispatch","useDispatch","classes","className","Typography","gutterBottom","Slider","valueLabelDisplay","onChange","event","newValue","Button","size","onClick","newRange","ChangeImageURL","img","textState","setTextState","TextField","id","label","e","currentTarget","url","SettingsPage","minWidth","DialogSettings","open","closeDialog","Dialog","onClose","fullWidth","DialogTitle","DialogContent","DialogActions","Notification","textMessage","messageType","close","closeMessage","reason","Alert","props","elevation","variant","Snackbar","autoHideDuration","severity","media","height","paddingTop","position","mainCard","rootContainer","counter","borderRadius","top","left","width","fontWeight","background","textAlign","Counter","notifications","ntfMessage","ntfMessageType","minRange","maxRange","dialogOpened","setDialogOpened","Grid","container","item","xs","Card","CardActionArea","CardMedia","image","title","CardContent","component","CardActions","IconButton","style","marginLeft","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","copyState","store","createStore","preloadedSerialized","preloaded","localStorage","getItem","JSON","parse","preloadedState","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ae6044e.chunk.js","sourcesContent":["export type stateType = {\n    value:number,\n    pickerValue:number[],\n    imageURL:string\n}\nexport const initState:stateType = {\n    value : 0,\n    pickerValue:[0,25],\n    imageURL:\"https://miro.medium.com/max/1400/1*meCFnZ5MK_7Fu1ogYfBvNQ.png\"\n}\n\n\nexport const incrementReducer = (state=initState,action:mainActionsType) =>{\n    switch (action.type){\n        case \"INC_COUNTER\":{\n            let copyState = {...state}\n            copyState.value = copyState.value + 1\n            return copyState\n        }\n        case \"DEC_COUNTER\":{\n            let copyState = {...state}\n            copyState.value = copyState.value - 1\n            return copyState\n        }\n        case \"CHANGE_PICKER\":{\n            let copyState = {...state}\n            copyState.pickerValue = [...action.newRange]\n            copyState.value = action.newRange[0]\n            return copyState\n        }\n        case \"CHANGE_IMG_URL\":{\n            let copyState = {...state}\n            copyState.imageURL = action.url\n            return copyState\n        }\n        case \"RST_COUNTER\":{\n            let copyState = {...state}\n            copyState.value = copyState.pickerValue[0]\n            return copyState\n        }\n        default: return state\n    }\n}\n\n\n\n\nexport const IncrementCounterAC = () =>{\n    return {type:'INC_COUNTER'} as const\n}\n\nexport const DecrementCounterAC = () =>{\n    return {type:'DEC_COUNTER'} as const\n}\n\nexport const changeSettingsPicker = (newRange: number [])=>{\n    return {type:'CHANGE_PICKER',newRange} as const\n}\n\nexport const changeImageURL = (url:string)=>{\n    return {type:'CHANGE_IMG_URL',url} as const\n}\n\nexport const rstCounterAC = () =>{\n    return {type:'RST_COUNTER'} as const\n}\ntype changeImageURLType = ReturnType<typeof changeImageURL>\ntype changeSettingsPickerType = ReturnType<typeof changeSettingsPicker>\ntype mainActionsType = IncrementCounterACType | DecrementCounterACType | changeSettingsPickerType | changeImageURLType | rstCounterACType\ntype IncrementCounterACType = ReturnType<typeof IncrementCounterAC>\ntype DecrementCounterACType = ReturnType<typeof DecrementCounterAC>\ntype rstCounterACType = ReturnType<typeof rstCounterAC>","export type ntfType = 'error' | 'warning' | 'info' | 'success'\n\nexport type initStateType = {\n    ntfRequired:boolean,\n    ntfText:string,\n    ntfType: ntfType\n}\n\nexport const initState:initStateType = {\n    ntfRequired:false,\n    ntfText:'',\n    ntfType:'success'\n}\n\nexport const notificationsReducer = (state=initState,action:ActionsType)=>{\n    switch (action.type){\n        case \"SHOW_NTF\":{\n            let copyState = {...state}\n            if(action.ntfText !== ''){\n                copyState.ntfRequired = true\n                copyState.ntfType = action.ntfType\n                copyState.ntfText = action.ntfText\n            }\n            return copyState\n        }\n        case \"CLOSE_NTF\":{\n            let copyState = {...state}\n            copyState.ntfRequired = false\n            copyState.ntfText = ''\n            return copyState\n        }\n        default:return state\n    }\n}\n\nexport type ActionsType = showNtfACType | closeNtfACType\ntype showNtfACType = ReturnType<typeof showNtfAC>\nexport const showNtfAC = (ntfText:string,ntfType:ntfType) =>{\n    return {type:'SHOW_NTF',ntfText,ntfType} as const\n}\nexport type closeNtfACType = ReturnType<typeof closeNtfAC>\nexport const closeNtfAC = () =>{\n    return {type:'CLOSE_NTF'} as const\n}","import {Button, makeStyles, Slider, Typography} from \"@material-ui/core\";\nimport {useCallback, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootReducerType} from \"../bll/store\";\nimport {changeSettingsPicker} from \"../bll/incrementReducer\";\nimport {isNumber} from \"util\";\nimport {showNtfAC} from \"../bll/notificationsReducer\";\nconst useStyles = makeStyles((theme)=>({\n    root:{\n        maxWidth:350,\n        display: 'flex',\n        justifyContent: 'flex-start',\n        alignItems: 'flex-end',\n        margin:theme.spacing(1)\n    }\n}))\nexport const SettingsPicker = () => {\n    const settingsValue = useSelector<RootReducerType,number[]>(state => state.incrementValue.pickerValue)\n    const [pickerState,setPickerState] = useState<number[]>(settingsValue)\n    const dispatch = useDispatch()\n    const applyNewRange = (event: any, newValue: number | number [])=>{\n        setPickerState(newValue as number[])\n        // dispatch(changeSettingsPicker(newValue as number[]))\n    }\n    const dispatchNewRange = ()=>{\n        if(settingsValue[0]==pickerState[0] && settingsValue[1]==pickerState[1]){\n            dispatch(showNtfAC('Current range already exist','warning'))\n        }else {\n            dispatch(changeSettingsPicker(pickerState))\n            dispatch(showNtfAC(`Current range is ${pickerState[0]} to ${pickerState[1]}`,'success'))\n        }\n    }\n    const classes = useStyles()\n    return <div className={classes.root}>\n        <Typography gutterBottom>Counter range</Typography>\n        <Slider valueLabelDisplay=\"auto\"\n                value={pickerState}\n                onChange={applyNewRange}/>\n        <Button size='small' onClick={dispatchNewRange}>Submit</Button>\n    </div>\n}","import {Button, makeStyles, TextField} from \"@material-ui/core\";\nimport {ChangeEvent, ChangeEventHandler, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {changeImageURL} from \"../bll/incrementReducer\";\nimport {RootReducerType} from \"../bll/store\";\nimport {showNtfAC} from \"../bll/notificationsReducer\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n        alignItems: 'flex-end',\n        margin:theme.spacing(1)\n    }\n}))\nexport const ChangeImageURL = () => {\n    const dispatch = useDispatch();\n    const img = useSelector<RootReducerType,string>(state=> state.incrementValue.imageURL)\n    const [textState,setTextState] = useState('')\n    const changeInputText = (e:ChangeEvent<HTMLInputElement>)=>{\n        setTextState(e.currentTarget.value)\n    }\n    const applyNewIMG = ()=>{\n        if(textState === img){\n            dispatch(showNtfAC('Image already exist','info'))\n        }else if (textState === ''){\n            dispatch(showNtfAC('Field is empty','error'))\n        }else {\n            dispatch(changeImageURL(textState))\n            dispatch(showNtfAC('Image updated','success'))\n        }\n    }\n    const classes = useStyles()\n    return <div className={classes.root}>\n        <TextField id=\"standard-basic\" label=\"Image URL\" value={textState} onChange={changeInputText}/>\n        <Button size='small' onClick={applyNewIMG}>Submit</Button>\n    </div>\n}","import {makeStyles, Typography} from \"@material-ui/core\";\nimport {SettingsPicker} from \"./SettingsPicker\";\nimport {ChangeImageURL} from \"./ChangeImageURL\";\n\nconst useStyles = makeStyles((theme)=>({\n\n}))\nexport const SettingsPage = ()=>{\n    const classes = useStyles()\n    return <div>\n        <SettingsPicker/>\n        <ChangeImageURL/>\n    </div>\n}","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    makeStyles\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport {SettingsPage} from \"./SettingPage\";\nconst useStyles = makeStyles((theme)=>({\n    root:{minWidth:300}\n}))\n\nexport type DialogSettingsPropsType = {\n    open:boolean,\n    closeDialog:()=>void\n}\nexport const DialogSettings:React.FC<DialogSettingsPropsType> = ({open,closeDialog}) => {\n    const classes = useStyles()\n    return <div>\n        <Dialog open={open} onClose={closeDialog} fullWidth maxWidth='sm'>\n            <DialogTitle id=\"dialog-title\">Counter setting</DialogTitle>\n            <DialogContent>\n                <SettingsPage/>\n            </DialogContent>\n            <DialogActions>\n                <Button>OK</Button>\n                <Button onClick={closeDialog}>Close</Button>\n            </DialogActions>\n        </Dialog>\n    </div>\n}","import {makeStyles, Snackbar} from \"@material-ui/core\";\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootReducerType} from \"../bll/store\";\nimport React from \"react\";\nimport {ntfType} from \"../bll/notificationsReducer\";\n\nconst useStyles = makeStyles((theme)=>({\n    root:{}\n}))\ntype NotificationPropsType = {\n    open:boolean,\n    textMessage:string,\n    messageType : ntfType,\n    close:()=>void\n}\nexport const Notification:React.FC<NotificationPropsType> = ({open,textMessage,messageType,close})=>{\n    const dispatch = useDispatch()\n    const closeMessage = (event?: React.SyntheticEvent, reason?: string)=>{\n        if (reason === 'clickaway'){\n            return;\n        }\n        close()\n    }\n    const classes = useStyles()\n    const Alert = (props:AlertProps)=>{\n        return <MuiAlert elevation={6} variant='filled' {...props}/>\n    }\n    return <div className={classes.root}>\n        <Snackbar open={open} autoHideDuration={2000} onClose={closeMessage}>\n            <Alert severity={messageType} onClose={closeMessage}>{textMessage}</Alert>\n        </Snackbar>\n    </div>\n}\n","import {\n    Button,\n    Card,\n    CardActionArea,\n    CardActions,\n    CardContent,\n    CardMedia,\n    Grid,\n    IconButton, makeStyles,\n    Typography\n} from \"@material-ui/core\";\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport {useState} from \"react\";\nimport {DialogSettings} from \"./DialogSettings\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {DecrementCounterAC, IncrementCounterAC, rstCounterAC, stateType} from \"../bll/incrementReducer\";\nimport {RootReducerType} from \"../bll/store\";\nimport WarningIcon from '@material-ui/icons/Warning';\nimport {Notification} from \"./Notification\";\nimport {closeNtfAC, ntfType, showNtfAC} from \"../bll/notificationsReducer\";\n\nconst useStyles = makeStyles((theme) => ({\n    media: {\n        height: 0,\n        paddingTop: '56.25%',\n        position: 'relative'\n    },\n    mainCard: {\n        maxWidth: 400\n    },\n    rootContainer: {\n        justifyContent: 'center',\n        paddingTop: theme.spacing(3)\n    },\n    counter: {\n        borderRadius:5,\n        top: '25%',\n        left: '25%',\n        width: '50%',\n        height: '50%',\n        position: 'absolute',\n        fontWeight: 400,\n        background: 'white',\n        textAlign: 'center'\n    }\n}))\n\n\nexport const Counter = () => {\n    const dispatch = useDispatch()\n    const value = useSelector<RootReducerType, number>(state => state.incrementValue.value)\n    const open = useSelector<RootReducerType, boolean>(state => state.notifications.ntfRequired)\n    const ntfMessage = useSelector<RootReducerType, string>(state => state.notifications.ntfText)\n    const ntfMessageType = useSelector<RootReducerType, ntfType>(state => state.notifications.ntfType)\n    const closeAlert = () => {\n        dispatch(closeNtfAC())\n    }\n    const [minRange, maxRange] = useSelector<RootReducerType, number[]>(state => state.incrementValue.pickerValue)\n    const imageURL = useSelector<RootReducerType, string>(state => state.incrementValue.imageURL)\n    const classes = useStyles()\n    const [dialogOpened, setDialogOpened] = useState<boolean>(false)\n    const [counter, setCounter] = useState<number>(0)\n    const openDialog = () => {\n        setDialogOpened(true)\n    }\n    const closeDialog = () => {\n        setDialogOpened(false)\n    }\n    const increment = () => {\n        if (value < maxRange) {\n            dispatch(IncrementCounterAC())\n        }\n        if (value > maxRange - 1) {\n            dispatch(closeNtfAC())\n            dispatch(showNtfAC(`Max range is ${maxRange}`, 'error'))\n        }\n    }\n    const decrement = () => {\n        if (value > minRange) {\n            dispatch(DecrementCounterAC())\n        }\n        if (value === minRange) {\n            dispatch(showNtfAC(`Min range is ${minRange}`, 'error'))\n        }\n    }\n    const reset = () => {\n\n        if (value === minRange) {\n            dispatch(showNtfAC('Counter has min value ', 'info'))\n        } else {\n            dispatch(showNtfAC('Counter reset success', 'success'))\n            dispatch(rstCounterAC())\n        }\n\n    }\n\n    return <Grid container className={classes.rootContainer}>\n        <Grid item xs={12} className={classes.mainCard}>\n            <Card>\n                <CardActionArea>\n                    <CardMedia className={classes.media}\n                               image={imageURL}\n                               title=\"ReactRedux\"/>\n                    <Typography variant='h1' className={classes.counter}>{value}</Typography>\n                </CardActionArea>\n                <CardContent>\n                    <Typography variant=\"h5\" gutterBottom>\n                        What is Redux ?\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"p\">\n                        Redux is an open-source JavaScript library for managing and centralizing application state. It\n                        is most commonly used with libraries such as React or Angular for building user interfaces.\n                        Similar to Facebook's Flux architecture, it was created by Dan Abramov and Andrew Clark.\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Button onClick={increment}>Increment</Button>\n                    <Button onClick={decrement}>Decrement</Button>\n                    <Button onClick={reset}>Reset</Button>\n                    <IconButton style={{marginLeft: \"auto\"}} onClick={openDialog}>\n                        <SettingsIcon/>\n                    </IconButton>\n                </CardActions>\n            </Card>\n        </Grid>\n        <DialogSettings open={dialogOpened} closeDialog={closeDialog}/>\n        <Notification open={open} textMessage={ntfMessage} messageType={ntfMessageType} close={closeAlert}/>\n    </Grid>\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Counter} from \"./components/Counter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Counter/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\nimport {incrementReducer, initState} from \"./incrementReducer\";\nimport {notificationsReducer} from \"./notificationsReducer\";\nimport {preloadedState} from \"./preloadedState\";\n\nexport type RootReducerType = ReturnType<typeof rootReducer>\nexport const rootReducer = combineReducers({\n    incrementValue : incrementReducer,\n    notifications:notificationsReducer\n})\nexport const store = createStore(rootReducer,preloadedState())\n\nstore.subscribe(()=>{\n    localStorage.setItem('data',JSON.stringify(store.getState()))\n})","export const preloadedState = () =>{\n    let preloadedSerialized = {}\n    const preloaded = localStorage.getItem('data')\n    if(preloaded){\n         preloadedSerialized = JSON.parse(preloaded)\n    }\n    return preloadedSerialized\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}